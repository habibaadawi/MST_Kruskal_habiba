class Graph:
    def __init__(self, vertices):
        self.V = vertices  # Number of vertices
        self.graph = []  # List to store edges

    def add_edge(self, u, v, w):
        """
        Adds an undirected edge to the graph.

        Args:
            u: Source vertex.
            v: Destination vertex.
            w: Weight of the edge.
        """
        self.graph.append([u, v, w])

    def find(self, parent, i):
        """
        Finds the root of the set to which vertex i belongs.
        """
        if parent[i] != i:
            parent[i] = self.find(parent, parent[i])
        return parent[i]

    def union(self, parent, rank, u, v):
        """
        Joins the sets containing vertices u and v.
        """
        u_root = self.find(parent, u)
        v_root = self.find(parent, v)

        if rank[u_root] < rank[v_root]:
            parent[u_root] = v_root
        elif rank[u_root] > rank[v_root]:
            parent[v_root] = u_root
        else:
            parent[v_root] = u_root
            rank[u_root] += 1

    def kruskal_mst(self):
        """
        Finds the Minimum Spanning Tree (MST) of the graph.
        """
        result = []  # List to store the edges of the MST
        i = 0  # An index variable, used for sorted edges
        e = 0  # An index variable, used for result[]

        # Sort edges by weight in non-decreasing order
        self.graph = sorted(self.graph, key=lambda item: item[2])

        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)

        while e < self.V - 1:
            u, v, w = self.graph[i]
            i = i + 1
            u_root = self.find(parent, u)
            v_root = self.find(parent, v)

            if u_root != v_root:
                result.append([u, v])  # Store only the edge, not the weight
                self.union(parent, rank, u_root, v_root)
            e = e + 1

        minimumCost = 0
        print("Edges in the constructed MST:")
        for u, v in result:
            minimumCost += self.graph[i - 1][2]  # Get the weight from the original graph
            print("%d -- %d" % (u, v))
        print("Minimum Spanning Tree cost=", minimumCost)

# Example usage
g = Graph(4)
g.add_edge(0, 1, 10)
g.add_edge(0, 2, 6)
g.add_edge(0, 3, 5)
g.add_edge(1, 3, 15)
g.add_edge(2, 3, 4)

g.kruskal_mst()
